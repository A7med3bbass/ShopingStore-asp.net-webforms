#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Bigstoredb")]
public partial class DataClassesDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertCategory(Category instance);
  partial void UpdateCategory(Category instance);
  partial void DeleteCategory(Category instance);
  partial void InsertMember(Member instance);
  partial void UpdateMember(Member instance);
  partial void DeleteMember(Member instance);
  partial void InsertOrderDetail(OrderDetail instance);
  partial void UpdateOrderDetail(OrderDetail instance);
  partial void DeleteOrderDetail(OrderDetail instance);
  partial void InsertOrder(Order instance);
  partial void UpdateOrder(Order instance);
  partial void DeleteOrder(Order instance);
  partial void InsertProduct(Product instance);
  partial void UpdateProduct(Product instance);
  partial void DeleteProduct(Product instance);
  #endregion
	
	public DataClassesDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["BigstoredbConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Category> Categories
	{
		get
		{
			return this.GetTable<Category>();
		}
	}
	
	public System.Data.Linq.Table<Member> Members
	{
		get
		{
			return this.GetTable<Member>();
		}
	}
	
	public System.Data.Linq.Table<OrderDetail> OrderDetails
	{
		get
		{
			return this.GetTable<OrderDetail>();
		}
	}
	
	public System.Data.Linq.Table<Order> Orders
	{
		get
		{
			return this.GetTable<Order>();
		}
	}
	
	public System.Data.Linq.Table<Product> Products
	{
		get
		{
			return this.GetTable<Product>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Category")]
public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _CatNo;
	
	private string _CatName;
	
	private string _CatDesc;
	
	private EntitySet<Product> _Products;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCatNoChanging(int value);
    partial void OnCatNoChanged();
    partial void OnCatNameChanging(string value);
    partial void OnCatNameChanged();
    partial void OnCatDescChanging(string value);
    partial void OnCatDescChanged();
    #endregion
	
	public Category()
	{
		this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CatNo", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int CatNo
	{
		get
		{
			return this._CatNo;
		}
		set
		{
			if ((this._CatNo != value))
			{
				this.OnCatNoChanging(value);
				this.SendPropertyChanging();
				this._CatNo = value;
				this.SendPropertyChanged("CatNo");
				this.OnCatNoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CatName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string CatName
	{
		get
		{
			return this._CatName;
		}
		set
		{
			if ((this._CatName != value))
			{
				this.OnCatNameChanging(value);
				this.SendPropertyChanging();
				this._CatName = value;
				this.SendPropertyChanged("CatName");
				this.OnCatNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CatDesc", DbType="NVarChar(MAX)")]
	public string CatDesc
	{
		get
		{
			return this._CatDesc;
		}
		set
		{
			if ((this._CatDesc != value))
			{
				this.OnCatDescChanging(value);
				this.SendPropertyChanging();
				this._CatDesc = value;
				this.SendPropertyChanged("CatDesc");
				this.OnCatDescChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Product", Storage="_Products", ThisKey="CatNo", OtherKey="CatNo")]
	public EntitySet<Product> Products
	{
		get
		{
			return this._Products;
		}
		set
		{
			this._Products.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Products(Product entity)
	{
		this.SendPropertyChanging();
		entity.Category = this;
	}
	
	private void detach_Products(Product entity)
	{
		this.SendPropertyChanging();
		entity.Category = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Member")]
public partial class Member : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _FirstName;
	
	private string _LastName;
	
	private string _EmailAddress;
	
	private string _Password;
	
	private EntitySet<Order> _Orders;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnEmailAddressChanging(string value);
    partial void OnEmailAddressChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
	
	public Member()
	{
		this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50)")]
	public string FirstName
	{
		get
		{
			return this._FirstName;
		}
		set
		{
			if ((this._FirstName != value))
			{
				this.OnFirstNameChanging(value);
				this.SendPropertyChanging();
				this._FirstName = value;
				this.SendPropertyChanged("FirstName");
				this.OnFirstNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50)")]
	public string LastName
	{
		get
		{
			return this._LastName;
		}
		set
		{
			if ((this._LastName != value))
			{
				this.OnLastNameChanging(value);
				this.SendPropertyChanging();
				this._LastName = value;
				this.SendPropertyChanged("LastName");
				this.OnLastNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailAddress", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string EmailAddress
	{
		get
		{
			return this._EmailAddress;
		}
		set
		{
			if ((this._EmailAddress != value))
			{
				this.OnEmailAddressChanging(value);
				this.SendPropertyChanging();
				this._EmailAddress = value;
				this.SendPropertyChanged("EmailAddress");
				this.OnEmailAddressChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50)")]
	public string Password
	{
		get
		{
			return this._Password;
		}
		set
		{
			if ((this._Password != value))
			{
				this.OnPasswordChanging(value);
				this.SendPropertyChanging();
				this._Password = value;
				this.SendPropertyChanged("Password");
				this.OnPasswordChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Order", Storage="_Orders", ThisKey="EmailAddress", OtherKey="EmailAddress")]
	public EntitySet<Order> Orders
	{
		get
		{
			return this._Orders;
		}
		set
		{
			this._Orders.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Orders(Order entity)
	{
		this.SendPropertyChanging();
		entity.Member = this;
	}
	
	private void detach_Orders(Order entity)
	{
		this.SendPropertyChanging();
		entity.Member = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderDetails")]
public partial class OrderDetail : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _CatNo;
	
	private int _ProdNo;
	
	private int _OrderNo;
	
	private System.Nullable<int> _Quantity;
	
	private System.Nullable<decimal> _SellPrice;
	
	private System.Nullable<decimal> _Descount;
	
	private EntityRef<Product> _Product;
	
	private EntityRef<Order> _Order;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCatNoChanging(int value);
    partial void OnCatNoChanged();
    partial void OnProdNoChanging(int value);
    partial void OnProdNoChanged();
    partial void OnOrderNoChanging(int value);
    partial void OnOrderNoChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    partial void OnSellPriceChanging(System.Nullable<decimal> value);
    partial void OnSellPriceChanged();
    partial void OnDescountChanging(System.Nullable<decimal> value);
    partial void OnDescountChanged();
    #endregion
	
	public OrderDetail()
	{
		this._Product = default(EntityRef<Product>);
		this._Order = default(EntityRef<Order>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CatNo", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int CatNo
	{
		get
		{
			return this._CatNo;
		}
		set
		{
			if ((this._CatNo != value))
			{
				if (this._Product.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCatNoChanging(value);
				this.SendPropertyChanging();
				this._CatNo = value;
				this.SendPropertyChanged("CatNo");
				this.OnCatNoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProdNo", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int ProdNo
	{
		get
		{
			return this._ProdNo;
		}
		set
		{
			if ((this._ProdNo != value))
			{
				if (this._Product.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnProdNoChanging(value);
				this.SendPropertyChanging();
				this._ProdNo = value;
				this.SendPropertyChanged("ProdNo");
				this.OnProdNoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderNo", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int OrderNo
	{
		get
		{
			return this._OrderNo;
		}
		set
		{
			if ((this._OrderNo != value))
			{
				if (this._Order.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnOrderNoChanging(value);
				this.SendPropertyChanging();
				this._OrderNo = value;
				this.SendPropertyChanged("OrderNo");
				this.OnOrderNoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int")]
	public System.Nullable<int> Quantity
	{
		get
		{
			return this._Quantity;
		}
		set
		{
			if ((this._Quantity != value))
			{
				this.OnQuantityChanging(value);
				this.SendPropertyChanging();
				this._Quantity = value;
				this.SendPropertyChanged("Quantity");
				this.OnQuantityChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellPrice", DbType="Decimal(7,2)")]
	public System.Nullable<decimal> SellPrice
	{
		get
		{
			return this._SellPrice;
		}
		set
		{
			if ((this._SellPrice != value))
			{
				this.OnSellPriceChanging(value);
				this.SendPropertyChanging();
				this._SellPrice = value;
				this.SendPropertyChanged("SellPrice");
				this.OnSellPriceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Descount", DbType="Decimal(3,2)")]
	public System.Nullable<decimal> Descount
	{
		get
		{
			return this._Descount;
		}
		set
		{
			if ((this._Descount != value))
			{
				this.OnDescountChanging(value);
				this.SendPropertyChanging();
				this._Descount = value;
				this.SendPropertyChanged("Descount");
				this.OnDescountChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_OrderDetail", Storage="_Product", ThisKey="CatNo,ProdNo", OtherKey="CatNo,ProdNo", IsForeignKey=true)]
	public Product Product
	{
		get
		{
			return this._Product.Entity;
		}
		set
		{
			Product previousValue = this._Product.Entity;
			if (((previousValue != value) 
						|| (this._Product.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Product.Entity = null;
					previousValue.OrderDetails.Remove(this);
				}
				this._Product.Entity = value;
				if ((value != null))
				{
					value.OrderDetails.Add(this);
					this._CatNo = value.CatNo;
					this._ProdNo = value.ProdNo;
				}
				else
				{
					this._CatNo = default(int);
					this._ProdNo = default(int);
				}
				this.SendPropertyChanged("Product");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderDetail", Storage="_Order", ThisKey="OrderNo", OtherKey="OrderNo", IsForeignKey=true)]
	public Order Order
	{
		get
		{
			return this._Order.Entity;
		}
		set
		{
			Order previousValue = this._Order.Entity;
			if (((previousValue != value) 
						|| (this._Order.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Order.Entity = null;
					previousValue.OrderDetails.Remove(this);
				}
				this._Order.Entity = value;
				if ((value != null))
				{
					value.OrderDetails.Add(this);
					this._OrderNo = value.OrderNo;
				}
				else
				{
					this._OrderNo = default(int);
				}
				this.SendPropertyChanged("Order");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Orders")]
public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _OrderNo;
	
	private System.Nullable<System.DateTime> _OrderDate;
	
	private string _ShipName;
	
	private string _ShipCity;
	
	private string _ShipArea;
	
	private string _ShipAddress;
	
	private string _EmailAddress;
	
	private EntitySet<OrderDetail> _OrderDetails;
	
	private EntityRef<Member> _Member;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderNoChanging(int value);
    partial void OnOrderNoChanged();
    partial void OnOrderDateChanging(System.Nullable<System.DateTime> value);
    partial void OnOrderDateChanged();
    partial void OnShipNameChanging(string value);
    partial void OnShipNameChanged();
    partial void OnShipCityChanging(string value);
    partial void OnShipCityChanged();
    partial void OnShipAreaChanging(string value);
    partial void OnShipAreaChanged();
    partial void OnShipAddressChanging(string value);
    partial void OnShipAddressChanged();
    partial void OnEmailAddressChanging(string value);
    partial void OnEmailAddressChanged();
    #endregion
	
	public Order()
	{
		this._OrderDetails = new EntitySet<OrderDetail>(new Action<OrderDetail>(this.attach_OrderDetails), new Action<OrderDetail>(this.detach_OrderDetails));
		this._Member = default(EntityRef<Member>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderNo", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int OrderNo
	{
		get
		{
			return this._OrderNo;
		}
		set
		{
			if ((this._OrderNo != value))
			{
				this.OnOrderNoChanging(value);
				this.SendPropertyChanging();
				this._OrderNo = value;
				this.SendPropertyChanged("OrderNo");
				this.OnOrderNoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> OrderDate
	{
		get
		{
			return this._OrderDate;
		}
		set
		{
			if ((this._OrderDate != value))
			{
				this.OnOrderDateChanging(value);
				this.SendPropertyChanging();
				this._OrderDate = value;
				this.SendPropertyChanged("OrderDate");
				this.OnOrderDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShipName", DbType="NVarChar(150)")]
	public string ShipName
	{
		get
		{
			return this._ShipName;
		}
		set
		{
			if ((this._ShipName != value))
			{
				this.OnShipNameChanging(value);
				this.SendPropertyChanging();
				this._ShipName = value;
				this.SendPropertyChanged("ShipName");
				this.OnShipNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShipCity", DbType="NVarChar(150)")]
	public string ShipCity
	{
		get
		{
			return this._ShipCity;
		}
		set
		{
			if ((this._ShipCity != value))
			{
				this.OnShipCityChanging(value);
				this.SendPropertyChanging();
				this._ShipCity = value;
				this.SendPropertyChanged("ShipCity");
				this.OnShipCityChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShipArea", DbType="NVarChar(150)")]
	public string ShipArea
	{
		get
		{
			return this._ShipArea;
		}
		set
		{
			if ((this._ShipArea != value))
			{
				this.OnShipAreaChanging(value);
				this.SendPropertyChanging();
				this._ShipArea = value;
				this.SendPropertyChanged("ShipArea");
				this.OnShipAreaChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShipAddress", DbType="NVarChar(150)")]
	public string ShipAddress
	{
		get
		{
			return this._ShipAddress;
		}
		set
		{
			if ((this._ShipAddress != value))
			{
				this.OnShipAddressChanging(value);
				this.SendPropertyChanging();
				this._ShipAddress = value;
				this.SendPropertyChanged("ShipAddress");
				this.OnShipAddressChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailAddress", CanBeNull=false)]
	public string EmailAddress
	{
		get
		{
			return this._EmailAddress;
		}
		set
		{
			if ((this._EmailAddress != value))
			{
				if (this._Member.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnEmailAddressChanging(value);
				this.SendPropertyChanging();
				this._EmailAddress = value;
				this.SendPropertyChanged("EmailAddress");
				this.OnEmailAddressChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderDetail", Storage="_OrderDetails", ThisKey="OrderNo", OtherKey="OrderNo")]
	public EntitySet<OrderDetail> OrderDetails
	{
		get
		{
			return this._OrderDetails;
		}
		set
		{
			this._OrderDetails.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Order", Storage="_Member", ThisKey="EmailAddress", OtherKey="EmailAddress", IsForeignKey=true)]
	public Member Member
	{
		get
		{
			return this._Member.Entity;
		}
		set
		{
			Member previousValue = this._Member.Entity;
			if (((previousValue != value) 
						|| (this._Member.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Member.Entity = null;
					previousValue.Orders.Remove(this);
				}
				this._Member.Entity = value;
				if ((value != null))
				{
					value.Orders.Add(this);
					this._EmailAddress = value.EmailAddress;
				}
				else
				{
					this._EmailAddress = default(string);
				}
				this.SendPropertyChanged("Member");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_OrderDetails(OrderDetail entity)
	{
		this.SendPropertyChanging();
		entity.Order = this;
	}
	
	private void detach_OrderDetails(OrderDetail entity)
	{
		this.SendPropertyChanging();
		entity.Order = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Product")]
public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _CatNo;
	
	private int _ProdNo;
	
	private string _ProdName;
	
	private System.Nullable<decimal> _ProdPrice;
	
	private System.Nullable<int> _ProdQuantity;
	
	private System.Nullable<System.DateTime> _ProdAddDate;
	
	private string _ProdDescription;
	
	private EntitySet<OrderDetail> _OrderDetails;
	
	private EntityRef<Category> _Category;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCatNoChanging(int value);
    partial void OnCatNoChanged();
    partial void OnProdNoChanging(int value);
    partial void OnProdNoChanged();
    partial void OnProdNameChanging(string value);
    partial void OnProdNameChanged();
    partial void OnProdPriceChanging(System.Nullable<decimal> value);
    partial void OnProdPriceChanged();
    partial void OnProdQuantityChanging(System.Nullable<int> value);
    partial void OnProdQuantityChanged();
    partial void OnProdAddDateChanging(System.Nullable<System.DateTime> value);
    partial void OnProdAddDateChanged();
    partial void OnProdDescriptionChanging(string value);
    partial void OnProdDescriptionChanged();
    #endregion
	
	public Product()
	{
		this._OrderDetails = new EntitySet<OrderDetail>(new Action<OrderDetail>(this.attach_OrderDetails), new Action<OrderDetail>(this.detach_OrderDetails));
		this._Category = default(EntityRef<Category>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CatNo", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int CatNo
	{
		get
		{
			return this._CatNo;
		}
		set
		{
			if ((this._CatNo != value))
			{
				if (this._Category.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCatNoChanging(value);
				this.SendPropertyChanging();
				this._CatNo = value;
				this.SendPropertyChanged("CatNo");
				this.OnCatNoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProdNo", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int ProdNo
	{
		get
		{
			return this._ProdNo;
		}
		set
		{
			if ((this._ProdNo != value))
			{
				this.OnProdNoChanging(value);
				this.SendPropertyChanging();
				this._ProdNo = value;
				this.SendPropertyChanged("ProdNo");
				this.OnProdNoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProdName", DbType="NVarChar(50)")]
	public string ProdName
	{
		get
		{
			return this._ProdName;
		}
		set
		{
			if ((this._ProdName != value))
			{
				this.OnProdNameChanging(value);
				this.SendPropertyChanging();
				this._ProdName = value;
				this.SendPropertyChanged("ProdName");
				this.OnProdNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProdPrice", DbType="Decimal(5,2)")]
	public System.Nullable<decimal> ProdPrice
	{
		get
		{
			return this._ProdPrice;
		}
		set
		{
			if ((this._ProdPrice != value))
			{
				this.OnProdPriceChanging(value);
				this.SendPropertyChanging();
				this._ProdPrice = value;
				this.SendPropertyChanged("ProdPrice");
				this.OnProdPriceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProdQuantity", DbType="Int")]
	public System.Nullable<int> ProdQuantity
	{
		get
		{
			return this._ProdQuantity;
		}
		set
		{
			if ((this._ProdQuantity != value))
			{
				this.OnProdQuantityChanging(value);
				this.SendPropertyChanging();
				this._ProdQuantity = value;
				this.SendPropertyChanged("ProdQuantity");
				this.OnProdQuantityChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProdAddDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> ProdAddDate
	{
		get
		{
			return this._ProdAddDate;
		}
		set
		{
			if ((this._ProdAddDate != value))
			{
				this.OnProdAddDateChanging(value);
				this.SendPropertyChanging();
				this._ProdAddDate = value;
				this.SendPropertyChanged("ProdAddDate");
				this.OnProdAddDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProdDescription", DbType="NVarChar(MAX)")]
	public string ProdDescription
	{
		get
		{
			return this._ProdDescription;
		}
		set
		{
			if ((this._ProdDescription != value))
			{
				this.OnProdDescriptionChanging(value);
				this.SendPropertyChanging();
				this._ProdDescription = value;
				this.SendPropertyChanged("ProdDescription");
				this.OnProdDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_OrderDetail", Storage="_OrderDetails", ThisKey="CatNo,ProdNo", OtherKey="CatNo,ProdNo")]
	public EntitySet<OrderDetail> OrderDetails
	{
		get
		{
			return this._OrderDetails;
		}
		set
		{
			this._OrderDetails.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Product", Storage="_Category", ThisKey="CatNo", OtherKey="CatNo", IsForeignKey=true)]
	public Category Category
	{
		get
		{
			return this._Category.Entity;
		}
		set
		{
			Category previousValue = this._Category.Entity;
			if (((previousValue != value) 
						|| (this._Category.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Category.Entity = null;
					previousValue.Products.Remove(this);
				}
				this._Category.Entity = value;
				if ((value != null))
				{
					value.Products.Add(this);
					this._CatNo = value.CatNo;
				}
				else
				{
					this._CatNo = default(int);
				}
				this.SendPropertyChanged("Category");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_OrderDetails(OrderDetail entity)
	{
		this.SendPropertyChanging();
		entity.Product = this;
	}
	
	private void detach_OrderDetails(OrderDetail entity)
	{
		this.SendPropertyChanging();
		entity.Product = null;
	}
}
#pragma warning restore 1591
